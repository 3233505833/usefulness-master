
import json
from typing import Dict

class BaseConfig:
    """Config for OpenAi's GPT model service."""

    __slots__ = []

    def __init__(self, key_value_params: Dict = None):
        if key_value_params is not None:
            for key in self.__slots__:
                if key in key_value_params.keys():
                    value = key_value_params[key]
                else:
                    value = None
                self.__setattr__(key, value)
        else:
            for key in self.__slots__:
                self.__setattr__(key, None)

    @classmethod
    def from_json_file(cls, config_path: str):
        """load config from json assets."""
        with open(config_path, "r", encoding="utf-8") as f:
            config_items = json.load(f)
        filtered_configs = {key: value for key, value in config_items.items() if key in cls.__slots__}
        return cls(filtered_configs)

    def update_attribute_value(self, attribute_name: str, update_attribute_value):
        origin_value = self.__getattribute__(attribute_name)
        self.__setattr__(attribute_name, update_attribute_value)
        print(f"INFO: update <{attribute_name}> from {origin_value} to {update_attribute_value}")


class GPT3ModelConfig(BaseConfig):
    """Config for OpenAi's GPT model service.
    Slots:
        - openai_api_key: (str, generated by open.ai)
        - init_delay: (int, 1)
        - exponential_base: (int, 2)
        - max_retries: (int, 6)
        - engine_name: (string, text-curie-001)
        - temperature: (float, 0.0)
        - max_tokens: (int, 5046)
        - top_p: (float, 0.01)
        - frequency_penalty: (float, 0.0), useless in text-cls task.
        - presence_penalty: (float, 0.0), useless in text-cls task.
    """

    __slots__ = ["openai_api_key", "init_delay", "exponential_base", "max_retries", "engine_name", "temperature",
                 "max_tokens", "top_p", "frequency_penalty", "presence_penalty", "rate_limit", "rate_limit_delay",
                 "batch_size", "logprobs", "user","save_log_dir","dataloader"]

    def __init__(self, key_value_params: Dict = None):
        super(GPT3ModelConfig, self).__init__(key_value_params)
        self.save_log_dir = key_value_params["save_log_dir"]



